---
title: "Exploring Data"
author: "Matt Maslow"
format: html
---

# Reading and Tidying the data

```{r}
library(tidyverse)
library(rvest)
```

## Playing with March Madness data from 2024 tournament

### Webscraping the data & Cleaning

```{r}
url <- "https://www.barttorvik.com/#"
```

```{r}
marchMadness <- 
  url %>%
  read_html() %>%
  html_nodes("table") %>%
  html_table(trim = TRUE, header = FALSE) %>%
  .[[1]] %>%
  .[-1,] %>%
  .[-27,] %>%
  .[-52,] %>%
  .[-77,] %>%
  .[-102,] %>%
  .[-127,] %>%
  .[-152,] # these rows had variables in them, so removed them.

marchMadness
```
```{r}
#write_csv(marchMadness, file = "MarchMadness24.csv")
```

```{r}
mm24 <- read_csv("MarchMadness24.csv")

mm24
```


# Dataset 1: For the shiny table

```{r}
mm24Qualified <- mm24[str_detect(mm24$Team, pattern = "❌|✅"), ]
```

```{r}
# write_csv(mm24Qualified, file = "mm24_TournamentTeams.csv")

mm24Qualified <- read_csv("mm24_TournamentTeams.csv")
```

*Used chat to help me clarify what some of the columns names meant*

1. **Conf**: Conference - This variable indicates the conference to which a team belongs.
2. **Games_Played**: The number of games played by the team in the season.
3. **AdjOE**: Adjusted Offensive Efficiency - A metric that measures a team's offensive efficiency while accounting for the strength of the opponent.
4. **AdjDE**: Adjusted Defensive Efficiency - A metric that measures a team's defensive efficiency while accounting for the strength of the opponent.
5. **Barthag**: A metric that estimates a team's expected winning percentage based on its adjusted offensive and defensive efficiencies.
6. **EFG%**: Effective Field Goal Percentage - A shooting metric that adjusts for the value of a three-point field goal relative to a two-point field goal.
7. **EFGD%**: Opponent Effective Field Goal Percentage - Similar to EFG%, but measures the opponent's shooting efficiency.
8. **TOR**: Turnover Rate - The percentage of possessions that end in a turnover for the team.
9. **TORD**: Opponent Turnover Rate - The percentage of possessions that end in a turnover for the opponent.
10. **ORB**: Offensive Rebound Rate - The percentage of available offensive rebounds grabbed by the team.
11. **DRB**: Defensive Rebound Rate - The percentage of available defensive rebounds grabbed by the team.
12. **FTR**: Free Throw Rate - The ratio of free throw attempts to field goal attempts for the team.
13. **FTRD**: Opponent Free Throw Rate - Similar to FTR, but for the opponent.
14. **2P%**: Two-Point Field Goal Percentage - The percentage of two-point field goals made by the team.
15. **2P%D**: Opponent Two-Point Field Goal Percentage - Similar to 2P%, but for the opponent.
16. **3P%**: Three-Point Field Goal Percentage - The percentage of three-point field goals made by the team.
17. **3P%D**: Opponent Three-Point Field Goal Percentage - Similar to 3P%, but for the opponent.
18. **3PR**: Three-Point Attempt Rate - The percentage of field goal attempts that are three-pointers for the team.
19. **3PRD**: Opponent Three-Point Attempt Rate - Similar to 3PR, but for the opponent.
20. **Adj T.**: Adjusted Tempo - A metric that estimates the number of possessions per 40 minutes while adjusting for the pace of play and opponent.
21. **WAB**: Wins Above Bubble - A metric that quantifies a team's wins relative to what a bubble team would typically achieve.




## cleaning data 

```{r}
mm24Qualified <- 
  mm24Qualified %>%
  select(-Rec) %>%
  rename(Games_Played = G) %>%
  mutate(Team = as.character(Team)) %>%
  separate(Team, sep = ",", into = c("Team", "Tournament_Status")) %>%
  separate(Team, sep = "(?<=\\D)(?=\\d)",
           into = c("Team", "PlayOff_Seed")) %>%
  separate(PlayOff_Seed, sep = "\\D", into = c("PlayOff_Seed", "rand")) %>%
  select(-rand, -Tournament_Status) %>%
  mutate(Conf = as.factor(Conf),
         PlayOff_Seed = as.integer(PlayOff_Seed))
mm24Qualified
```

"(?<=\\D)(?=\\d)", this means that there's a non digit that is followed by a digit, in this case space before the digit (utilized stringR cheatsheet)

# Dataset 2: For shiny plot

```{r}
mmHist <- read_csv("mmHistorical.csv")
# https://data.world/michaelaroy/ncaa-tournament-results
```
Here is a file containing every NCAA tournament game result since 1985 (when the tournament was expanded to the 64 team bracket). The dataset contains the year, round (1-6), seed of the teams (1-16), region (1-4) and the scores. 35 years of data, 1985-2019

```{r}
mmHist <- 
  mmHist %>%
  rename(`Seed 1` = Seed...5,
         `Score 1` = Score...6,
         `Team 1` = Team...7,
         `Team 2` = Team...8,
         `Score 2` = Score...9,
         `Seed 2` = Seed...10) %>%
  select(-`Region Number`) %>%
  mutate(Round = as.factor(Round),
         `Region Name` = as.factor(`Region Name`)) %>%
  arrange(Year)
mmHist
```
## playing around with dataset 2, for plot ideas

```{r}
mmHist %>%
  group_by(Year) %>%
  filter(Round == 6 & `Score 2` > `Score 1`) %>%
  ggplot(aes(Year, `Score 2`, fill = `Team 2`))+
  geom_point() +
  theme_minimal()

mmHist %>%
  group_by(Year) %>%
  filter(Round == 6 & `Score 1` > `Score 2`) %>%
  ggplot(aes(Year, `Score 1`, fill = `Team 1`))+
  geom_point() +
  theme_minimal()
```













# Final project

```{r}
library(plotly)
library(shiny)

ui <- navbarPage(
  title = "March Madness Analysis",
  tabPanel("Statistics",
             radioButtons("stat_type", 
                 label = "Pick a Stat:",
                 choices = c("Defensive and Opponent Stats", "Offensive Stats"),
                 selected = "Defensive and Opponent Stats"),
             selectizeInput("Team_choice", label = "Choose Team(s):",
                   choices = mm24Qualified$Team, selected = "Connecicut",
                   multiple = TRUE),
  tableOutput("Team_Table")
  ),
 tabPanel("Plots",
          selectInput("round_choice",
                      label = "Choose a playoff round:",
                      choices = c("1", "2", "3", "4", "5", "6"),
                      selected = "1"),
          sliderInput("year_range",
                      label = "Choose a year range:",
                      min = 1985, max = 2019,
                      value = c(1985, 2019), 
                      sep = ""),
          plotlyOutput("Team_Plot", width = "100%", height = 600)
          )
  )
    
server <- function(input, output, session) {
  
  mm24TableFiltered <- reactive({
   if (input$stat_type == "Defensive and Opponent Stats"){
     mm24TableFiltered <- 
       mm24Qualified %>% 
       filter(Team %in% input$Team_choice) %>%
       select(Team, PlayOff_Seed, Conf, Games_Played, Barthag, AdjDE, `EFG%`,
              DRB, FTRD, `2P%D`, `3P%D`, `3PRD`, `Adj T.`, WAB) %>%
       arrange(PlayOff_Seed)
   } else {
     mm24TableFiltered <- 
       mm24Qualified %>% 
       filter(Team %in% input$Team_choice) %>%
       select(Team, PlayOff_Seed, Conf, Games_Played, Barthag, AdjOE, `EFGD%`,
              ORB, FTR, `2P%`, `3P%`, `3PR`, `Adj T.`, WAB) %>%
       arrange(PlayOff_Seed)
   }
  })
   output$Team_Table <- renderTable({
     mm24TableFiltered()
   })
   
   
    mmHistPlot <- reactive({
      mmHist %>%
        filter(Round == input$round_choice & Year >= input$year_range[1] & Year <= input$year_range[2])
    })
    
    output$Team_Plot <- renderPlotly({
      plt <- mmHistPlot() %>%
        mutate(winner_score = ifelse(`Score 1` > `Score 2`, `Score 1`, `Score 2`),
               winning_team = ifelse(`Score 1` > `Score 2`, `Team 1`, `Team 2`),
               losing_team = ifelse(`Score 1` > `Score 2`, `Team 2`, `Team 1`),
               losing_score = ifelse(`Score 1` > `Score 2`, `Score 2`, `Score 1`)) %>%
        ggplot(aes(Year, winner_score, fill = winning_team, label = losing_score, label2 = losing_team))+
        geom_point() +
        theme_minimal() +
        scale_colour_viridis_c() +
        labs(title = "NCAA Tournament Results",
             x = "Year",
             y = "Winning Score") +
        scale_x_continuous(breaks = seq(input$year_range[1], input$year_range[2], 5))
      ggplotly(plt, tooltip = c("x", "y", "fill", "label", "label2"))
    })
  
   
  
}

shinyApp(ui, server)
```
























